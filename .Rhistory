} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
#return(factor(y_mod))
return(y_mod)
}
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
untracemem()
untracemaem(data_sim)
untracemem(data_sim)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .9)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .99)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
out_label = flip_fn(data_sim$y, .1)
data_sim$y = out_label
sum(data_sim0$y == data_sim$y)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
probability = .9
y = data_sim$y
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
sum(y == y_mod)
sum(flip)
flip_fn = function(y, probability){
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
#return(factor(y_mod))
return(y_mod)
}
sum(as.numeric(data_sim0$y) == out_label)
as.numeric(data_sim0$y) == out_label
out_label
as.numeric(data_sim0$y)
y_set
data_sim$y
# parameters
data_sim0 = as.data.frame(iris[1:100, ])
colnames(data_sim0)[ncol(data_sim0)] = "y"
colnames(data_sim0)[1:(ncol(data_sim0) - 1)] = paste0("x", 1:(ncol(data_sim0) - 1))
data_sim0$y = factor(as.numeric(data_sim0$y[1:100]))
data_sim = data.frame(data_sim0)
n = nrow(data_sim)
train_percent = .8
train_size = n * train_percent
out_label = flip_fn(data_sim$y, .1)
data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
sum(as.numeric(data_sim0$y) == as.numeric(out_label))
out_label = flip_labels(data_sim$y, .1)
out_label
flip_labels = function(y, probability){
y = as.numeric(y)
#y = c(rep(1,50), rep(0,50))
flip = rbinom(length(y), 1, prob = probability)
y_set = unique(y)
for (i in 1:length(y)){
if (flip[i] == 0){
y_mod[i] = y[i]
} else {
if (y[i] == y_set[1]){
y_mod[i] = y_set[2]
} else if (y[i] == y_set[2]) {
y_mod[i] = y_set[1]
}
}
}
#return(factor(y_mod))
return(y_mod)
}
out_label = flip_labels(data_sim$y, .1)
out_label
# parameters
data_sim0 = as.data.frame(iris[1:100, ])
colnames(data_sim0)[ncol(data_sim0)] = "y"
colnames(data_sim0)[1:(ncol(data_sim0) - 1)] = paste0("x", 1:(ncol(data_sim0) - 1))
data_sim0$y = factor(as.numeric(data_sim0$y[1:100]))
data_sim = data.frame(data_sim0)
n = nrow(data_sim)
train_percent = .8
train_size = n * train_percent
data_sim$y
out_label
as.numeric(data_sim0$y)
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .1)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
out_label = flip_labels(data_sim$y, .7)
# data_sim$y = out_label
sum(as.numeric(data_sim0$y) == out_label)
list(train_set, test_set)
test = list(train_set, test_set)
names(test) = c("train", "test")
test
?tune.svm
gamma
?svm
kernetl_type = "radial"
tune_out = tune.svm(x = train_set[, -ncol(train_set)], y = train_set[, ncol(train_set)],
type = "C-classification", kernel = kernetl_type,  cost = 10^(-1:10), gamma = c(0.1, 1, 10)
#degree = 2, gamma = c(0.1, 1, 10), coef0 = c(0.1, 1, 10))
)
svm_radial = function(input_train, input_test, cost, gamma_val){
tune_out = tune.svm(x = input_train[, -ncol(input_train)], y = input_train[, ncol(input_train)],
type = "C-classification", kernel = "radial", cost = cost, gamma = gamma_val) # default is RBF kernel
svm_model = svm(y ~ ., data = input_train, kernel = "radial", cost = tune_out$best.parameters$cost, gamma = tune_out$best.parameters$gamma, scale =  FALSE)
pred_svm <- predict(svm_model, input_test)
tab_svm <- table(Predicted = pred_svm, Actual = input_test$y)
val = sum(diag(tab_svm))/sum(tab_svm)
return(val)
}
svm_linear = function(input_train, input_test, cost){
tune_out = tune.svm(x = input_train[, -ncol(input_train)], y = input_train[, ncol(input_train)],
type = "C-classification", kernel = "linear",  cost = cost)
svm_model = svm(y ~ ., data = input_train, kernel = "linear", cost = tune_out$best.parameters$cost, scale =  FALSE)
pred_svm <- predict(svm_model, input_test)
tab_svm <- table(Predicted = pred_svm, Actual = input_test$y)
val = sum(diag(tab_svm))/sum(tab_svm)
return(val)
}
test_out = lda_svm_fn(input_data = iris[1:100,], 0.8)
# wrapper function
lda_svm_fn = function(input_data, train_percent){
train_test = split_fn(input_data, train_percent)
error_lda = lda_fn(train_test$train, train_test$test)
error_svm_linear = svm_linear(train_test$train, train_test$test, cost = 10^(-1:10))
error_svm_radial = svm_radial(train_test$train, train_test$test, cost = 10^(-1:10), gamma = c(0.1, 1, 10))
return(c(error_lda, error_svm_linear, error_svm_radial))
}
test_out = lda_svm_fn(input_data = iris[1:100,], 0.8)
split_fn = function(input_data, train_percent){
n = nrow(input_data)
train_percent = train_percent
train_size = n * train_percent
shuffle_data <- sample(seq(1:n), n, replace = FALSE)
train_set <- input_data[shuffle_data[1:train_size],]
test_set <- input_data[shuffle_data[(train_size+1):n],]
out = list(train_set, test_set)
names(out) = c("train", "test")
return(out)
}
test_out = lda_svm_fn(input_data = iris[1:100,], 0.8)
# computing LDA error rate
lda_fn = function(input_train, input_test){
lda_model <- lda(y~., input_train)
pred_lda <- predict(lda_model, input_test)$class
tab_lda <- table(Predicted = pred_lda, Actual = input_test$y)
val = sum(diag(tab_lda))/sum(tab_lda)
return(val)
}
test_out = lda_svm_fn(input_data = iris[1:100,], 0.8)
train_test = split_fn(iris[1:100,], 0.8)
error_lda = lda_fn(train_test$train, train_test$test)
data_sim0 = as.data.frame(iris[1:100, ])
colnames(data_sim0)[ncol(data_sim0)] = "y"
colnames(data_sim0)[1:(ncol(data_sim0) - 1)] = paste0("x", 1:(ncol(data_sim0) - 1))
test_out = lda_svm_fn(input_data = data_sim0, 0.8)
test_out
train_test = split_fn(test_out, 0.8)
train_test = split_fn(data_sim0, 0.8)
train_test$train
data_sim0 = as.data.frame(iris[1:100, ])
colnames(data_sim0)[ncol(data_sim0)] = "y"
colnames(data_sim0)[1:(ncol(data_sim0) - 1)] = paste0("x", 1:(ncol(data_sim0) - 1))
train_test = split_fn(data_sim0, 0.8)
train_test$train
train_test$test
data_sim0
train_test$train
train_test$test
error_lda = lda_fn(train_test$train, train_test$test)
error_lda
lda_model <- lda(y~., train_test$train)
pred_lda <- predict(lda_model, train_test$test)$class
tab_lda <- table(Predicted = pred_lda, Actual = train_test$test$y)
val = sum(diag(tab_lda))/sum(tab_lda)
lda_model
pred_lda
tab_lda
sum(diag(tab_lda))
sum(tab_lda)
lda_svm_fn = function(input_data, train_percent){
train_test = split_fn(input_data, train_percent)
error_lda = 1-lda_fn(train_test$train, train_test$test)
error_svm_linear = 1-svm_linear(train_test$train, train_test$test, cost = 10^(-1:10))
error_svm_radial = 1-svm_radial(train_test$train, train_test$test, cost = 10^(-1:10), gamma = c(0.1, 1, 10))
return(c(error_lda, error_svm_linear, error_svm_radial))
}
test_out = lda_svm_fn(input_data = data_sim0, 0.8)
test_out
test_out = lda_svm_fn(input_data = data_sim0, 0.4)
test_out
test_out = lda_svm_fn(input_data = data_sim0, 0.1)
test_out
train_test = split_fn(data_sim0, 0.1)
error_lda = lda_fn(train_test$train, train_test$test)
error_lda
train_test$train
train_test$test
train_test = split_fn(data_sim0, 0.0001)
error_lda = lda_fn(train_test$train, train_test$test)
train_test = split_fn(data_sim0, 0.001)
error_lda = lda_fn(train_test$train, train_test$test)
train_test = split_fn(data_sim0, 0.01)
error_lda = lda_fn(train_test$train, train_test$test)
train_test = split_fn(data_sim0, 0.1)
error_lda = lda_fn(train_test$train, train_test$test)
error_lda
train_test$train
x1 = c(rnorm(500, 0,1), rnorm(500,3,1))
x2 = rnorm(1000)
x3 = rnorm(1000)
class= factor(rep(1:2, each=500))
plot(x1,x2, pch=20, col=class)
?mvgamma
?mvgamma
install.packages("icmix")
install.packages("Icmix")
install.packages("CholWishart")
install.packages("CholWishart")
setwd("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::document()
devtools::install("fracsup")
getwd()
devtools::install(fracsup)
?devtools::install()
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
detach("package:fracsup", unload = TRUE)
library(blob)
library(AlgDesign)
detach("package:fracsup", unload = TRUE)
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::install(C:\Maruf\UWaterloo\PhD\Research\Projects_PhD\Factor Analyzer_Fractionally Supervised\R code\fracsup)
devtools::install(C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup)
devtools::install(C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup)
devtools::install(C:\Maruf\UWaterloo\PhD\Research\Projects_PhD\Factor Analyzer_Fractionally Supervised\R code\fracsup)
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::document()
devtools::install(r"C:\Maruf\UWaterloo\PhD\Research\Projects_PhD\Factor Analyzer_Fractionally Supervised\R code\fracsup")
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::install(C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup)
devtools::install(C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup)
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
library(fracsup)
devtools::document()
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::document()
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::install("C:/Maruf/UWaterloo/PhD/Research/Projects_PhD/Factor Analyzer_Fractionally Supervised/R code/fracsup")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
mvtnorm
library(mvtnorm)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
